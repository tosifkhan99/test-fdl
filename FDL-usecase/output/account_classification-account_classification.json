{"namespace":"default","name":"account_classification-account_classification","type":"BATCH","providers":{"readers":[{"name":"gam_connection","type":"QUERY","provider":"com.fininfra.aqua.action.extn.jdbc.JDBCReader","params":{"user":"source-db-user","password":"source-db-password","url":"source-db-url","driver":"org.postgresql.Driver"}},{"name":"gac_connection","type":"QUERY","provider":"com.fininfra.aqua.action.extn.jdbc.JDBCReader","params":{"user":"source-db-user","password":"source-db-password","url":"source-db-url","driver":"org.postgresql.Driver"}}],"transformations":[],"destinations":[{"name":"flowLogger","provider":"com.fininfra.aqua.defn.config.common.FlowLogger","params":{"filePath":"./Logger.out","format":"text/plain"}},{"name":"account_classification","type":"TUPLE","provider":"com.fininfra.aqua.extn.purge.consumer.PurgeWriter","params":{"acks":"1","bootstrap.servers":"localhost:9092"},"broadcast":"com.fininfra.aqua.extn.kafka.KafkaProducerFunction"}],"errdestinations":[{"name":"account_classification","provider":"com.fininfra.aqua.extn.kafka.KafkaErrorWriter","params":{"acks":"1","bootstrap.servers":"localhost:9092","url":"jdbc:postgresql:postgres","driver":"org.postgresql.Driver","user":"dheerajkumar","password":""},"broadcast":"com.fininfra.aqua.extn.kafka.KafkaProducerFunction"}],"validators":[]},"onerror":[{"name":"account_classification","destination":"account_classification","params":{"topic":"error","url":"jdbc:postgresql:postgres","driver":"org.postgresql.Driver","user":"dheerajkumar","password":""}}],"onvalidationerror":[],"source":{"empty":true,"meta":{},"views":[{"name":"gam","reader":"gam_connection","params":{"table":"general_acct_mast_table","query":"select * from general_acct_mast_table","partitionColumn":"","lowerBound":"","upperBound":"","numPartitions":""}},{"name":"gac","reader":"gac_connection","params":{"table":"gen_acct_class_table","query":"select * from gen_acct_class_table","partitionColumn":"","lowerBound":"","upperBound":"","numPartitions":""}}],"pageSize":"1000","query":"SELECT gam.foracid as account_identification, gac.sector_code as sector_code, gac.sub_sector_code as sub_sector_code, gac.guar_cover_code as guarantee_cover_code, gac.nature_of_advn as nature_of_advance, gac.type_of_advn as type_of_advance, gac.mode_of_advn as mode_of_advance, gac.purpose_of_advn as purpose_of_advance, gac.free_code_1 as free_code1, gac.free_code_2 as free_code2, gac.free_code_3 as free_code3, gac.free_code_4 as free_code4, gac.industry_type as industry_type, gac.acct_occp_code as occupation_code, gac.borrower_category_code as borrower_category_code, gac.free_code_5 as free_code5, gac.free_code_6 as free_code6, gac.free_code_7 as free_code7, gac.free_code_8 as free_code8, gac.free_code_9 as free_code9, gac.free_code_10 as free_code10, gac.pd_flg as past_due_flag, gac.pd_xfer_date as past_due_transfer_date, gac.pd_re_xfer_date as past_due_re_transfer_date, gac.prv_to_pd_gl_sub_head_code as provision_to_pd_gl_sub_head_code, gac.dpd_cntr as dpd_counter, gac.dpd_ason_date as dpd_as_on_date, gac.chrge_off_flg as charge_off_flag, gac.daily_comp_int_flg as compounding_interest_flag, gac.free_text_1 as free_text1, gac.free_text_2 as free_text2, gac.free_text_3 as free_text3, gac.free_text_4 as free_text4, gac.free_text_5 as free_text5, gac.free_text_6 as free_text6, gac.free_text_7 as free_text7, gac.free_text_8 as free_text8, gac.free_text_9 as free_text9, gac.free_text_10 as free_text10, gac.free_text_11 as free_text11, gac.free_text_12 as free_text12, gac.free_text_13 as free_text13, gac.free_text_14 as free_text14, gac.free_text_15 as free_text15, gac.match_opp_rate as treasury_rate_percentage, gac.freeze_rmks as freeze_remarks, gac.freeze_rmks2 as freeze_remarks2, gac.freeze_rmks3 as freeze_remarks3, gac.freeze_rmks4 as freeze_remarks4, gac.freeze_rmks5 as freeze_remarks5, gac.ecs_flag as ecs_enabled_flag, gac.comp_date_flg as compounding_rest_indicator, gac.disc_rate_flg as discounted_rate_flag, gac.ias_code as ias_classification_code, gac.penal_prod_mthd_flg as penal_product_method_flag, gac.penal_rate_mthd_flg as penal_rate_method_flag, gac.waive_min_coll_int as waive_minimum_collection_interest, gac.rule_code as rule_code, gac.secured_flg as secured_flag, gac.bank_id as bank_identification, gac.request_sol_id as request_branch_identification, gac.request_department as request_department, gac.ref_num as reference_number, gac.markup_int_rate_appl_flg as markup_interest_rate_applicable_flag, gac.alt1_freeze_rmks as alternative_freeze_remarks, gac.apy_pcnt as annual_percentage_yield, gac.hedged_acct_flg as hedged_account_flag, gac.used_for_net_off_flg as used_for_netting_off_flag, gac.int_compounding_frq_cr as interest_compounding_frequency_credit, gac.int_compounding_rest_flg_cr as interest_compounding_rest_flag_credit, gac.disc_rate_flg_cr as discount_rate_flag_credit, gac.konformna_flg as konformna_flag, gac.free_text_16 as free_text16, gac.free_text_17 as free_text17, gac.free_text_18 as free_text18, gac.free_text_19 as free_text19, gac.free_text_20 as free_text20, gac.free_text_21 as free_text21, gac.free_text_22 as free_text22, gac.free_text_23 as free_text23, gac.free_text_24 as free_text24, gac.free_text_25 as free_text25, gac.security_indicator as security_indicator, gac.debt_seniority as debt_seniority, gac.security_code as security_code, gac.neg_cr_int_allowed_flg as negative_credit_indicator_allowed_flag, gac.lchg_time as data_persistance_time, gac.rcre_time as source_creation_time, gam.bank_id||'.'||gam.foracid as business_column_value FROM gam INNER JOIN gac ON gam.acid=gac.acid AND gam.bank_id=gac.bank_id"},"validator":{"name":"account_classification","validatorClass":"com.fininfra.aqua.extn.purge.tranPurge.TranPurgeValidator","params":{"bankId":"01"}},"srcevents":[{"namespace":"account_classification","name":"account_classification","steps":[],"procedure":{"namespace":"account_classification","name":"account_classification","logger":"false","inputschema":"{}","execplan":[{"steps":[],"actions":[{"name":"account_classification","condition":[],"destination":"account_classification","params":{"topic":"purgekeys","key_fields":["tran_key","tct","ata","atd","ott","pte"],"acks":"1","bootstrap.servers":"localhost:9092","user":"dheerajkumar","password":"","url":"jdbc:postgresql:postgres","driver":"org.postgresql.Driver"}}],"onsuccess":[]}],"onsuccess":[{"name":"account_classification","condition":[],"destination":"account_classification","params":{"topic":"aqua-purge","value":"{\"type\":\"aqua.purge.tranPurge\",\"data\":{\"bankId\":\"${#get(meta,'bankId')}\",\"toDate\":\"${#get(meta,'toDate')}\"},\"businessDate\":\"${T(java.time.LocalDate).now().toString()}\"}","url":"jdbc:postgresql:postgres","driver":"org.postgresql.Driver","user":"dheerajkumar","password":""}}]}}]}